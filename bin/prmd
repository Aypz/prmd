#!/usr/bin/env ruby
require 'optparse'
require(File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib', 'prmd')))

options = {}

commands = {
  combine: OptionParser.new do |opts|
    opts.banner = "prmd combine [options] <directory>"
    opts.on("-o", "--output [file]", "Write output to <file> instead of stdout") do |o|
      options[:output] = o
    end
  end,
  doc: OptionParser.new do |opts|
    opts.banner = "prmd doc [options] <directory>"
  end,
  init: OptionParser.new do |opts|
    opts.banner = "prmd init [options] <directory> <resource>"
  end,
  verify: OptionParser.new do |opts|
    opts.banner = "prmd verify [options] <directory or schema>"
  end
}

help_text = commands.values.map do |command|
  "   #{command.banner}"
end.join("\n")

global = OptionParser.new do |opts|
  opts.banner = "Usage: prmd [options] [command [options]]"
  opts.separator "\nAvailable options:"
  opts.on("--version", "Return version") do |opts|
    puts "prmd #{Prmd::VERSION}"
    exit(0)
  end
  opts.separator "\nAvailable commands:"
  opts.separator help_text
end

if ARGV.empty?
  puts global
  exit(1)
end
global.order!

command = ARGV.shift.to_sym
option = commands[command]
if option.nil?
  puts global
  exit(1)
end

if ARGV.empty? && $stdin.tty?
  puts option
  exit(1)
end
option.order!

case command
  when :combine
    schema = Prmd.combine(ARGV[0])
    if (path = options[:output])
      File.open(path, 'w') do |f|
        f.write(schema.to_s)
      end
    else
      puts schema.to_s
    end
  when :doc
    Prmd.doc(ARGV[0])
  when :init
    Prmd.init(ARGV[0], ARGV[1])
  when :verify
    errors = []
    if ARGV.empty?
      data = $stdin.read
      errors = Prmd.verify(JSON.parse(data))
      puts data
    elsif File.directory?(ARGV[0])
      Dir.glob(File.join(ARGV[0], '**/*.json')).each do |path|
        Prmd.verify(JSON.parse(File.read(path))).each do |error|
          errors << "#{path}: #{error}"
        end
      end
    else
      Prmd.verify(JSON.parse(File.read(ARGV[0]))).each do |error|
        errors << "#{ARGV[0]}: #{error}"
      end
    end
    errors.each do |error|
      $stderr.puts error
    end
    exit(1) unless errors.empty?
end
